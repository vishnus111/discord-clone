generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}

model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String
  imageUrl String
  email String

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  imageUrl String
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  serverId String
  server Server @relation(fields: [serverId], references: [id])

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  serverId String
  server Server @relation(fields: [serverId], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String

  fileUrl String?

  memberId String
  member Member @relation(fields: [memberId], references: [id])

  channelId String
  channel Channel @relation(fields: [channelId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id])

  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id])

  directMessages DirectMessage[]
}

model DirectMessage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  fileUrl String?

  memberId String
  member Member @relation(fields: [memberId], references: [id])

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
